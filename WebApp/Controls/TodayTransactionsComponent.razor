@inject IGetTodayTransactionsUseCase GetTodayTransactionsUseCase
@inject IGetProductByIdUseCase GetProductByIdUseCase

@if (_transactions != null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Cashier Name</th>
            <th>Product Name</th>
            <th>Date Time</th>
            <th>Qty Before</th>
            <th>Qty Sold</th>
            <th>Qty After</th>
            <th>Sold AMT</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var transaction in _transactions)
            {
                <tr>
                    <td>@transaction.CashierName</td>
                    <td>@transaction.ProductName</td>
                    <td>@transaction.TimeStamp.ToString("MM/dd hh:mm")</td>
                    <td>@transaction.BeforeQty</td>
                    <td>@transaction.SoldQty</td>
                    <td>@(transaction.BeforeQty - transaction.SoldQty)</td>
                    <td>@(string.Format("{0:c}",transaction.SoldQty * transaction.Price))</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IEnumerable<Transaction> _transactions;

    public void LoadTransactions(string cashierName)
    {
        _transactions = GetTodayTransactionsUseCase.Execute(cashierName);
        StateHasChanged();
    }

}